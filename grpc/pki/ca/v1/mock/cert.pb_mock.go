// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/pki/ca/v1/cert.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/linuxuser586/apis/grpc/pki/ca/v1"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCertServiceClient is a mock of CertServiceClient interface
type MockCertServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertServiceClientMockRecorder
}

// MockCertServiceClientMockRecorder is the mock recorder for MockCertServiceClient
type MockCertServiceClientMockRecorder struct {
	mock *MockCertServiceClient
}

// NewMockCertServiceClient creates a new mock instance
func NewMockCertServiceClient(ctrl *gomock.Controller) *MockCertServiceClient {
	mock := &MockCertServiceClient{ctrl: ctrl}
	mock.recorder = &MockCertServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertServiceClient) EXPECT() *MockCertServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCertServiceClient) Get(ctx context.Context, in *v1.CertRequest, opts ...grpc.CallOption) (*v1.CertResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCertServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertServiceClient)(nil).Get), varargs...)
}

// MockCertServiceServer is a mock of CertServiceServer interface
type MockCertServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCertServiceServerMockRecorder
}

// MockCertServiceServerMockRecorder is the mock recorder for MockCertServiceServer
type MockCertServiceServerMockRecorder struct {
	mock *MockCertServiceServer
}

// NewMockCertServiceServer creates a new mock instance
func NewMockCertServiceServer(ctrl *gomock.Controller) *MockCertServiceServer {
	mock := &MockCertServiceServer{ctrl: ctrl}
	mock.recorder = &MockCertServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertServiceServer) EXPECT() *MockCertServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCertServiceServer) Get(arg0 context.Context, arg1 *v1.CertRequest) (*v1.CertResponse, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCertServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertServiceServer)(nil).Get), arg0, arg1)
}
