// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/cassandra/backup/v1/backup.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/linuxuser586/apis/grpc/cassandra/backup/v1"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockisUpstream_Payload is a mock of isUpstream_Payload interface
type MockisUpstream_Payload struct {
	ctrl     *gomock.Controller
	recorder *MockisUpstream_PayloadMockRecorder
}

// MockisUpstream_PayloadMockRecorder is the mock recorder for MockisUpstream_Payload
type MockisUpstream_PayloadMockRecorder struct {
	mock *MockisUpstream_Payload
}

// NewMockisUpstream_Payload creates a new mock instance
func NewMockisUpstream_Payload(ctrl *gomock.Controller) *MockisUpstream_Payload {
	mock := &MockisUpstream_Payload{ctrl: ctrl}
	mock.recorder = &MockisUpstream_PayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisUpstream_Payload) EXPECT() *MockisUpstream_PayloadMockRecorder {
	return m.recorder
}

// isUpstream_Payload mocks base method
func (m *MockisUpstream_Payload) isUpstream_Payload() {
	m.ctrl.Call(m, "isUpstream_Payload")
}

// isUpstream_Payload indicates an expected call of isUpstream_Payload
func (mr *MockisUpstream_PayloadMockRecorder) isUpstream_Payload() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUpstream_Payload", reflect.TypeOf((*MockisUpstream_Payload)(nil).isUpstream_Payload))
}

// MarshalTo mocks base method
func (m *MockisUpstream_Payload) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisUpstream_PayloadMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisUpstream_Payload)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisUpstream_Payload) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisUpstream_PayloadMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisUpstream_Payload)(nil).Size))
}

// MockisRestore_Payload is a mock of isRestore_Payload interface
type MockisRestore_Payload struct {
	ctrl     *gomock.Controller
	recorder *MockisRestore_PayloadMockRecorder
}

// MockisRestore_PayloadMockRecorder is the mock recorder for MockisRestore_Payload
type MockisRestore_PayloadMockRecorder struct {
	mock *MockisRestore_Payload
}

// NewMockisRestore_Payload creates a new mock instance
func NewMockisRestore_Payload(ctrl *gomock.Controller) *MockisRestore_Payload {
	mock := &MockisRestore_Payload{ctrl: ctrl}
	mock.recorder = &MockisRestore_PayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRestore_Payload) EXPECT() *MockisRestore_PayloadMockRecorder {
	return m.recorder
}

// isRestore_Payload mocks base method
func (m *MockisRestore_Payload) isRestore_Payload() {
	m.ctrl.Call(m, "isRestore_Payload")
}

// isRestore_Payload indicates an expected call of isRestore_Payload
func (mr *MockisRestore_PayloadMockRecorder) isRestore_Payload() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRestore_Payload", reflect.TypeOf((*MockisRestore_Payload)(nil).isRestore_Payload))
}

// MarshalTo mocks base method
func (m *MockisRestore_Payload) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRestore_PayloadMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRestore_Payload)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRestore_Payload) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRestore_PayloadMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRestore_Payload)(nil).Size))
}

// MockBackupServiceClient is a mock of BackupServiceClient interface
type MockBackupServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackupServiceClientMockRecorder
}

// MockBackupServiceClientMockRecorder is the mock recorder for MockBackupServiceClient
type MockBackupServiceClientMockRecorder struct {
	mock *MockBackupServiceClient
}

// NewMockBackupServiceClient creates a new mock instance
func NewMockBackupServiceClient(ctrl *gomock.Controller) *MockBackupServiceClient {
	mock := &MockBackupServiceClient{ctrl: ctrl}
	mock.recorder = &MockBackupServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupServiceClient) EXPECT() *MockBackupServiceClientMockRecorder {
	return m.recorder
}

// StreamFrom mocks base method
func (m *MockBackupServiceClient) StreamFrom(ctx context.Context, in *v1.Downstream, opts ...grpc.CallOption) (v1.BackupService_StreamFromClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamFrom", varargs...)
	ret0, _ := ret[0].(v1.BackupService_StreamFromClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamFrom indicates an expected call of StreamFrom
func (mr *MockBackupServiceClientMockRecorder) StreamFrom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFrom", reflect.TypeOf((*MockBackupServiceClient)(nil).StreamFrom), varargs...)
}

// StreamTo mocks base method
func (m *MockBackupServiceClient) StreamTo(ctx context.Context, opts ...grpc.CallOption) (v1.BackupService_StreamToClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamTo", varargs...)
	ret0, _ := ret[0].(v1.BackupService_StreamToClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamTo indicates an expected call of StreamTo
func (mr *MockBackupServiceClientMockRecorder) StreamTo(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamTo", reflect.TypeOf((*MockBackupServiceClient)(nil).StreamTo), varargs...)
}

// DeleteCommitLog mocks base method
func (m *MockBackupServiceClient) DeleteCommitLog(ctx context.Context, opts ...grpc.CallOption) (v1.BackupService_DeleteCommitLogClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommitLog", varargs...)
	ret0, _ := ret[0].(v1.BackupService_DeleteCommitLogClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommitLog indicates an expected call of DeleteCommitLog
func (mr *MockBackupServiceClientMockRecorder) DeleteCommitLog(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommitLog", reflect.TypeOf((*MockBackupServiceClient)(nil).DeleteCommitLog), varargs...)
}

// DeleteIncremental mocks base method
func (m *MockBackupServiceClient) DeleteIncremental(ctx context.Context, opts ...grpc.CallOption) (v1.BackupService_DeleteIncrementalClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIncremental", varargs...)
	ret0, _ := ret[0].(v1.BackupService_DeleteIncrementalClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIncremental indicates an expected call of DeleteIncremental
func (mr *MockBackupServiceClientMockRecorder) DeleteIncremental(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncremental", reflect.TypeOf((*MockBackupServiceClient)(nil).DeleteIncremental), varargs...)
}

// MockBackupService_StreamFromClient is a mock of BackupService_StreamFromClient interface
type MockBackupService_StreamFromClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_StreamFromClientMockRecorder
}

// MockBackupService_StreamFromClientMockRecorder is the mock recorder for MockBackupService_StreamFromClient
type MockBackupService_StreamFromClientMockRecorder struct {
	mock *MockBackupService_StreamFromClient
}

// NewMockBackupService_StreamFromClient creates a new mock instance
func NewMockBackupService_StreamFromClient(ctrl *gomock.Controller) *MockBackupService_StreamFromClient {
	mock := &MockBackupService_StreamFromClient{ctrl: ctrl}
	mock.recorder = &MockBackupService_StreamFromClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_StreamFromClient) EXPECT() *MockBackupService_StreamFromClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockBackupService_StreamFromClient) Recv() (*v1.Upstream, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.Upstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_StreamFromClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).Recv))
}

// Header mocks base method
func (m *MockBackupService_StreamFromClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBackupService_StreamFromClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockBackupService_StreamFromClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBackupService_StreamFromClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockBackupService_StreamFromClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBackupService_StreamFromClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBackupService_StreamFromClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_StreamFromClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_StreamFromClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_StreamFromClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_StreamFromClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_StreamFromClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_StreamFromClient)(nil).RecvMsg), m)
}

// MockBackupService_StreamToClient is a mock of BackupService_StreamToClient interface
type MockBackupService_StreamToClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_StreamToClientMockRecorder
}

// MockBackupService_StreamToClientMockRecorder is the mock recorder for MockBackupService_StreamToClient
type MockBackupService_StreamToClientMockRecorder struct {
	mock *MockBackupService_StreamToClient
}

// NewMockBackupService_StreamToClient creates a new mock instance
func NewMockBackupService_StreamToClient(ctrl *gomock.Controller) *MockBackupService_StreamToClient {
	mock := &MockBackupService_StreamToClient{ctrl: ctrl}
	mock.recorder = &MockBackupService_StreamToClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_StreamToClient) EXPECT() *MockBackupService_StreamToClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_StreamToClient) Send(arg0 *v1.Restore) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_StreamToClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_StreamToClient) Recv() (*v1.RestoreResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.RestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_StreamToClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).Recv))
}

// Header mocks base method
func (m *MockBackupService_StreamToClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBackupService_StreamToClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockBackupService_StreamToClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBackupService_StreamToClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockBackupService_StreamToClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBackupService_StreamToClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBackupService_StreamToClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_StreamToClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_StreamToClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_StreamToClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_StreamToClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_StreamToClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_StreamToClient)(nil).RecvMsg), m)
}

// MockBackupService_DeleteCommitLogClient is a mock of BackupService_DeleteCommitLogClient interface
type MockBackupService_DeleteCommitLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_DeleteCommitLogClientMockRecorder
}

// MockBackupService_DeleteCommitLogClientMockRecorder is the mock recorder for MockBackupService_DeleteCommitLogClient
type MockBackupService_DeleteCommitLogClientMockRecorder struct {
	mock *MockBackupService_DeleteCommitLogClient
}

// NewMockBackupService_DeleteCommitLogClient creates a new mock instance
func NewMockBackupService_DeleteCommitLogClient(ctrl *gomock.Controller) *MockBackupService_DeleteCommitLogClient {
	mock := &MockBackupService_DeleteCommitLogClient{ctrl: ctrl}
	mock.recorder = &MockBackupService_DeleteCommitLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_DeleteCommitLogClient) EXPECT() *MockBackupService_DeleteCommitLogClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_DeleteCommitLogClient) Send(arg0 *v1.DeleteRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_DeleteCommitLogClient) Recv() (*v1.DeleteResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).Recv))
}

// Header mocks base method
func (m *MockBackupService_DeleteCommitLogClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockBackupService_DeleteCommitLogClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockBackupService_DeleteCommitLogClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBackupService_DeleteCommitLogClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_DeleteCommitLogClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_DeleteCommitLogClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_DeleteCommitLogClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_DeleteCommitLogClient)(nil).RecvMsg), m)
}

// MockBackupService_DeleteIncrementalClient is a mock of BackupService_DeleteIncrementalClient interface
type MockBackupService_DeleteIncrementalClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_DeleteIncrementalClientMockRecorder
}

// MockBackupService_DeleteIncrementalClientMockRecorder is the mock recorder for MockBackupService_DeleteIncrementalClient
type MockBackupService_DeleteIncrementalClientMockRecorder struct {
	mock *MockBackupService_DeleteIncrementalClient
}

// NewMockBackupService_DeleteIncrementalClient creates a new mock instance
func NewMockBackupService_DeleteIncrementalClient(ctrl *gomock.Controller) *MockBackupService_DeleteIncrementalClient {
	mock := &MockBackupService_DeleteIncrementalClient{ctrl: ctrl}
	mock.recorder = &MockBackupService_DeleteIncrementalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_DeleteIncrementalClient) EXPECT() *MockBackupService_DeleteIncrementalClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_DeleteIncrementalClient) Send(arg0 *v1.DeleteRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_DeleteIncrementalClient) Recv() (*v1.DeleteResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).Recv))
}

// Header mocks base method
func (m *MockBackupService_DeleteIncrementalClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockBackupService_DeleteIncrementalClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockBackupService_DeleteIncrementalClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBackupService_DeleteIncrementalClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_DeleteIncrementalClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_DeleteIncrementalClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_DeleteIncrementalClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_DeleteIncrementalClient)(nil).RecvMsg), m)
}

// MockBackupServiceServer is a mock of BackupServiceServer interface
type MockBackupServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackupServiceServerMockRecorder
}

// MockBackupServiceServerMockRecorder is the mock recorder for MockBackupServiceServer
type MockBackupServiceServerMockRecorder struct {
	mock *MockBackupServiceServer
}

// NewMockBackupServiceServer creates a new mock instance
func NewMockBackupServiceServer(ctrl *gomock.Controller) *MockBackupServiceServer {
	mock := &MockBackupServiceServer{ctrl: ctrl}
	mock.recorder = &MockBackupServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupServiceServer) EXPECT() *MockBackupServiceServerMockRecorder {
	return m.recorder
}

// StreamFrom mocks base method
func (m *MockBackupServiceServer) StreamFrom(arg0 *v1.Downstream, arg1 v1.BackupService_StreamFromServer) error {
	ret := m.ctrl.Call(m, "StreamFrom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamFrom indicates an expected call of StreamFrom
func (mr *MockBackupServiceServerMockRecorder) StreamFrom(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFrom", reflect.TypeOf((*MockBackupServiceServer)(nil).StreamFrom), arg0, arg1)
}

// StreamTo mocks base method
func (m *MockBackupServiceServer) StreamTo(arg0 v1.BackupService_StreamToServer) error {
	ret := m.ctrl.Call(m, "StreamTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamTo indicates an expected call of StreamTo
func (mr *MockBackupServiceServerMockRecorder) StreamTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamTo", reflect.TypeOf((*MockBackupServiceServer)(nil).StreamTo), arg0)
}

// DeleteCommitLog mocks base method
func (m *MockBackupServiceServer) DeleteCommitLog(arg0 v1.BackupService_DeleteCommitLogServer) error {
	ret := m.ctrl.Call(m, "DeleteCommitLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommitLog indicates an expected call of DeleteCommitLog
func (mr *MockBackupServiceServerMockRecorder) DeleteCommitLog(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommitLog", reflect.TypeOf((*MockBackupServiceServer)(nil).DeleteCommitLog), arg0)
}

// DeleteIncremental mocks base method
func (m *MockBackupServiceServer) DeleteIncremental(arg0 v1.BackupService_DeleteIncrementalServer) error {
	ret := m.ctrl.Call(m, "DeleteIncremental", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncremental indicates an expected call of DeleteIncremental
func (mr *MockBackupServiceServerMockRecorder) DeleteIncremental(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncremental", reflect.TypeOf((*MockBackupServiceServer)(nil).DeleteIncremental), arg0)
}

// MockBackupService_StreamFromServer is a mock of BackupService_StreamFromServer interface
type MockBackupService_StreamFromServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_StreamFromServerMockRecorder
}

// MockBackupService_StreamFromServerMockRecorder is the mock recorder for MockBackupService_StreamFromServer
type MockBackupService_StreamFromServerMockRecorder struct {
	mock *MockBackupService_StreamFromServer
}

// NewMockBackupService_StreamFromServer creates a new mock instance
func NewMockBackupService_StreamFromServer(ctrl *gomock.Controller) *MockBackupService_StreamFromServer {
	mock := &MockBackupService_StreamFromServer{ctrl: ctrl}
	mock.recorder = &MockBackupService_StreamFromServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_StreamFromServer) EXPECT() *MockBackupService_StreamFromServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_StreamFromServer) Send(arg0 *v1.Upstream) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_StreamFromServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockBackupService_StreamFromServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBackupService_StreamFromServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockBackupService_StreamFromServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBackupService_StreamFromServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBackupService_StreamFromServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBackupService_StreamFromServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockBackupService_StreamFromServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_StreamFromServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_StreamFromServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_StreamFromServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_StreamFromServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_StreamFromServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_StreamFromServer)(nil).RecvMsg), m)
}

// MockBackupService_StreamToServer is a mock of BackupService_StreamToServer interface
type MockBackupService_StreamToServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_StreamToServerMockRecorder
}

// MockBackupService_StreamToServerMockRecorder is the mock recorder for MockBackupService_StreamToServer
type MockBackupService_StreamToServerMockRecorder struct {
	mock *MockBackupService_StreamToServer
}

// NewMockBackupService_StreamToServer creates a new mock instance
func NewMockBackupService_StreamToServer(ctrl *gomock.Controller) *MockBackupService_StreamToServer {
	mock := &MockBackupService_StreamToServer{ctrl: ctrl}
	mock.recorder = &MockBackupService_StreamToServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_StreamToServer) EXPECT() *MockBackupService_StreamToServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_StreamToServer) Send(arg0 *v1.RestoreResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_StreamToServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_StreamToServer) Recv() (*v1.Restore, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.Restore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_StreamToServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockBackupService_StreamToServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBackupService_StreamToServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockBackupService_StreamToServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBackupService_StreamToServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBackupService_StreamToServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBackupService_StreamToServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockBackupService_StreamToServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_StreamToServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_StreamToServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_StreamToServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_StreamToServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_StreamToServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_StreamToServer)(nil).RecvMsg), m)
}

// MockBackupService_DeleteCommitLogServer is a mock of BackupService_DeleteCommitLogServer interface
type MockBackupService_DeleteCommitLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_DeleteCommitLogServerMockRecorder
}

// MockBackupService_DeleteCommitLogServerMockRecorder is the mock recorder for MockBackupService_DeleteCommitLogServer
type MockBackupService_DeleteCommitLogServerMockRecorder struct {
	mock *MockBackupService_DeleteCommitLogServer
}

// NewMockBackupService_DeleteCommitLogServer creates a new mock instance
func NewMockBackupService_DeleteCommitLogServer(ctrl *gomock.Controller) *MockBackupService_DeleteCommitLogServer {
	mock := &MockBackupService_DeleteCommitLogServer{ctrl: ctrl}
	mock.recorder = &MockBackupService_DeleteCommitLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_DeleteCommitLogServer) EXPECT() *MockBackupService_DeleteCommitLogServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_DeleteCommitLogServer) Send(arg0 *v1.DeleteResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_DeleteCommitLogServer) Recv() (*v1.DeleteRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.DeleteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockBackupService_DeleteCommitLogServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockBackupService_DeleteCommitLogServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBackupService_DeleteCommitLogServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockBackupService_DeleteCommitLogServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_DeleteCommitLogServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_DeleteCommitLogServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_DeleteCommitLogServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_DeleteCommitLogServer)(nil).RecvMsg), m)
}

// MockBackupService_DeleteIncrementalServer is a mock of BackupService_DeleteIncrementalServer interface
type MockBackupService_DeleteIncrementalServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackupService_DeleteIncrementalServerMockRecorder
}

// MockBackupService_DeleteIncrementalServerMockRecorder is the mock recorder for MockBackupService_DeleteIncrementalServer
type MockBackupService_DeleteIncrementalServerMockRecorder struct {
	mock *MockBackupService_DeleteIncrementalServer
}

// NewMockBackupService_DeleteIncrementalServer creates a new mock instance
func NewMockBackupService_DeleteIncrementalServer(ctrl *gomock.Controller) *MockBackupService_DeleteIncrementalServer {
	mock := &MockBackupService_DeleteIncrementalServer{ctrl: ctrl}
	mock.recorder = &MockBackupService_DeleteIncrementalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupService_DeleteIncrementalServer) EXPECT() *MockBackupService_DeleteIncrementalServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockBackupService_DeleteIncrementalServer) Send(arg0 *v1.DeleteResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockBackupService_DeleteIncrementalServer) Recv() (*v1.DeleteRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.DeleteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockBackupService_DeleteIncrementalServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockBackupService_DeleteIncrementalServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBackupService_DeleteIncrementalServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockBackupService_DeleteIncrementalServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockBackupService_DeleteIncrementalServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockBackupService_DeleteIncrementalServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBackupService_DeleteIncrementalServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBackupService_DeleteIncrementalServer)(nil).RecvMsg), m)
}
